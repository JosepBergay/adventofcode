{
	// Place your adventofcode21 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"aocday": {
		"scope": "typescript",
		"prefix": "aocday",
		"body": [
			"import type { AOCDay } from \"../types\";",
			"import { fetchInput } from \"../helpers.js\";",
			"",
			"const level = ${1:x};",
			"",
			"type ParsedInput = ${2:any}[];",
			"",
			"const parser = (input: string): ParsedInput =>",
			"  input.split(\"\\n\").map(${3:mapper});",
			"",
			"const executePart1 = (input: ParsedInput) => {",
			"  return \"\";",
			"};",
			"",
			"const executePart2 = (input: ParsedInput) => {",
			"  return \"\";",
			"};",
			"",
			"const day$1: AOCDay = async () => {",
			"  const input = await fetchInput(level);",
			"",
			"  const parsed = parser(input);",
			"",
			"  const part1 = `${executePart1(parsed)}`;",
			"",
			"  const part2 = `${executePart2(parsed)}`;",
			"",
			"  return { level, part1, part2 };",
			"};",
			"",
			"export default day$1;",
			""
		]
	},
	"aoc": {
        "scope": "golang, go",
        "prefix": "aoc",
        "body": [
            "package aoc2022",
            "",
            "type day$1 struct{}",
            "",
            "func init() {",
            "\tDays[$1] = &day$1{}",
            "}",
            "",
            "func (d *day$1) Parse(input string) (string, error) {",
            "\treturn \"TODO\", nil",
            "}",
            "",
            "func (d *day$1) Part1(input string) (string, error) {",
            "\treturn \"TODO\", nil",
            "}",
            "",
            "func (d *day$1) Part2(input string) (string, error) {",
            "\treturn \"TODO\", nil",
            "}",
            "",
            "func (d *day$1) Exec(input string) (*DayResult, error) {",
            "\tparsed, err := d.Parse(input)",
            "",
            "\tif err != nil {",
            "\t\treturn nil, err",
            "\t}",
            "",
            "\tpart1, err := d.Part1(parsed)",
            "",
            "\tif err != nil {",
            "\t\treturn nil, err",
            "\t}",
            "",
            "\tpart2, err := d.Part2(parsed)",
            "",
            "\tif err != nil {",
            "\t\treturn nil, err",
            "\t}",
            "",
            "\tresult := &DayResult{part1, part2}",
            "",
            "\treturn result, nil",
            "}",
            ""
        ]
    },
	"testaoc": {
        "scope": "golang, go",
        "prefix": "testaoc",
        "body": [
            "package aoc2022",
            "",
            "import \"testing\"",
            "",
            "const inputD$1 = ``",
            "",
            "const expectedD$1P1 = \"\"",
            "",
            "func TestDay$1Part1(t *testing.T) {",
            "\tday := &day$1{}",
            "",
            "\tparsed, err := day.Parse(inputD$1)",
            "",
            "\tif err != nil {",
            "\t\tt.Errorf(\"[Parse]: %v\", err.Error())",
            "\t\treturn",
            "\t}",
            "",
            "\tres, err := day.Part1(parsed)",
            "",
            "\tif err != nil {",
            "\t\tt.Errorf(\"[Part1]: %v\", err.Error())",
            "\t\treturn",
            "\t}",
            "",
            "\tif res != expectedD$1P1 {",
            "\t\tt.Errorf(\"Expected: %v \\nBut got: %v\", expectedD$1P1, res)",
            "\t}",
            "}",
            "",
            "const expectedD$1P2 = \"\"",
            "",
            "func TestDay$1Part2(t *testing.T) {",
            "\tday := &day$1{}",
            "",
            "\tparsed, err := day.Parse(inputD$1)",
            "",
            "\tif err != nil {",
            "\t\tt.Errorf(\"[Parse]: %v\", err.Error())",
            "\t\treturn",
            "\t}",
            "",
            "\tres, err := day.Part2(parsed)",
            "",
            "\tif err != nil {",
            "\t\tt.Errorf(\"[Part2]: %v\", err.Error())",
            "\t\treturn",
            "\t}",
            "",
            "\tif res != expectedD2P2 {",
            "\t\tt.Errorf(\"Expected: %v \\nBut got: %v\", expectedD$1P2, res)",
            "\t}",
            "}",
            ""
        ]
    },
}